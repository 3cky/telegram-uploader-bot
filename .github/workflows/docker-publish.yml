name: Docker image CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

env:
  PLATFORMS: linux/amd64,linux/arm64
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get build version and timestamp
        run: |
          git fetch -a
          VERSION=$(git describe --always --dirty --tags)
          TIMESTAMP=$(date -u '+%Y-%m-%d_%I:%M:%S%p')
          echo "Build version: $VERSION"
          echo "Build timestamp: $TIMESTAMP"
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.BUILD_VERSION }}
            TIMESTAMP=${{ env.BUILD_TIMESTAMP }}
          cache-from: type=gha,scope=${{ env.IMAGE_NAME }}
          cache-to: type=gha,mode=max,scope=${{ env.IMAGE_NAME }}
          
